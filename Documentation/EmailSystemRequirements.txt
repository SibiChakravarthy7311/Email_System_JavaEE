Email System:
	Problem statement, Scope and Requirement:
		This email system is designed as an illustration of a real time email system for the analysis purposes of basic java skills, Java server request basics. It illustrates the basic working of a real time email system and it's scope currently is limited to deployment in native system.

		This project bundle can potentially be used for review and as a reference for future project trainees.

		The functionalities of this email system include,
			User Registration
			User Login
			Composing mail (sending mail from one registered user to another)
			Viewing Inbox
			Viewing Sent Mails
			Deleting Mails from inbox
			Inbox Sharing

		The technologies used in this project are,
			JAVA programming language (JDK 1.8.0_381)
			JSP (Java Server Pages)
			Java Servlets
			Apache Tomcat Server (9.0.53)



	Module List:
		The modules planned and required to implement this project can be divided into three parts:
			1. Java Class Files - which defines the class properties, fields and behavior
			2. Web app pages - JSP pages for receiving the server http response, and showing the dynamically generated html content from using the received response, their corresponding cascading style sheets, and javascript files.
			3. Servlets to receive the http request, create the necessary objects of the class files, and generated the required result and send back the http response to the jsp/html page.

		In this MVC model, JSP pages are the major View components, Servlets act as the main Controller components, MySQL acts as the base model .The methods defined in the java class files are responsible for access, modification actions in the model.

		1. Java Class Files:
			The class files for JAVA include files for handling specific purposes such as,
				Creating Users.
				Template and basic functions like send, receive for mails.
				Validating login credentials, mails.
				Deleting Mails.
				Sharing Inbox.

			i. Creating Users:
				The user class must have certain characteristics for users such as firstName, lastName, email, password all of which are strings.
				A constructor to initiate them, a create function to create the user and push them into database.

			ii. Mail:
				The mails class should have fields for strings fromMail, toMail, mailContent.
				A constructor to initiate them and functions sendMail and receiveMail to send and receive mails.

			iii. MailLoginValidator:
				The mail login validator must have fields for strings email, password.
				A constructor to initiate them and a function ValidateLoginCredentials to authenticate the user provided data.

			iv. MailVerifier:
				This class has a single responsibility of checking whether the manual mail id provided by the user is valid and already registered.

			v. InboxSharer:
				This class belongs to the MailSharing package and contains string fields - owner, receiver.
				A constructor to initialize them and a share inbox function to add to the database to share the access of owner's inbox to the receiver.
				This function also utilizes an object of the MailVerifier class for verifying the receiver email provided.

			vi. InboxRevoker:
				This class contains a single integer field - sharingId which denotes the id of the specified mail stored in the database.
				This class contains a function revokeSharingById() to modify the database to revoke the inbox viewing permission for a user.

			vii. MailDeletor:
				This interface belongs to the MailDeletor package.
				It defines the rules for two other classes - InboxDeletor, SentMailDeletor which are meant for deleting the emails.

			viii. InboxDeletor:
				This class inherits the MailDeletor interface and contains a delete function for deleting the mail received by the user which does not get deleted from the sender's sentMail box.

			ix. SentMailDeletor:
				This class inherits the MailDeletor interface and contains a delete function for deleting the mail received by the user which gets deleted from the receiver's inbox too.


		2. Web App Pages:
			The web app pages consists of the view components that will be dynamically generated by the JSP pages using the response received from the controller(Servlet pages).
			The main JSPs used in this project are,
				a. SignUp.jsp
				b. Login.jsp
				c. ZohoMail.jsp

			a. SignUp.jsp:
				In this JSP, the main index page of the project is present where the user can enter his/her details and signUp for the ZohoMail(A mail registered for the scope of the document).
				It consists of single form that takes four inputs - firstName, lastName, email, password. All four of these are required fields.
					i.firstName - String that consists of the user's first name. Some constraints that could be added are - the string should only contain alphabetic characteristics and white spaces, it should start with an alphabetic character, the length of the string should be less than or equal to 256 characters.
					ii.lastName - String that consists of the user's last name. The same constraints as for the firstName apply to this field too.
					iii. email - String that consists of an user's choice of email. Some constraints for it could include - It should only consist of alphanumeric characters, a single '@' character, one or more periods('.') after the '@ character' and a minimum of 1 alphanumeric character before and after the '@' character, should start with an alphabetic character, should be unique for every user.
					iv. password - String (password field) that consists of the user's password to the account. Some constraints could include - it should contain at least 1 special character, at least 1 capital letter, at least 1 small letter, at least 1 number and be a length of minimum 8 characters and a maximum of 256 characters.
				The action landing page of this form is set to the SignUpServlet with a 'post' method request. Thus, this page will transfer the user entered information to the SignUpServlet on successful validation of the field details using a post request. A prompt is set to diplay if the user creation was successful.
				Upon successful registration, the response from the Servlet will send redirect to the Login page along with a prompt displaying success message of registration.
				In case of a unsuccesful registration, the response from the Servlet will send redirect back to the SignUp page along with a prompt displaying unsuccessful registration message.

			b. Login.jsp:
				This jsp page consists of a form that takes two inputs - email, password. Both of these are required fields.
					The same constraints as for in the email and password fields of the SignUp.jsp page applies to these fields too.
				The action landing page of this form is set to the LoginServlet with a 'post' method request. Thus, this page will send the user provided information to the LoginServlet. 
				On successful login, the servlet response will send redirect to the ZohoMail.jsp page with a prompt message for successful login.
				If the login has been unsuccessful, the response from the servlet will send redirect back to the Login.jsp page along with a promp displaying unsuccessful login message.

			c. ZohoMail.jsp:
				This is perhaps the most important page of our application.
				It consists of three major components,
					Header
					Sidebar
					MainContent/MainBody

				i. Header:
					It is developed with a flex display.
					This section resides on the top of the page and can be further subdivided into three parts,
						header-left		: This segment consists of the Logo of our project.
						header-middle	: This segment consists of a form for searching string from mail contents(This function is not supported till now).
						header-right	: This segment consists of a span text displaying which user is currently logged in/has the session control, a logout icon which facilitates logging out of the present user session by forwarding it to the Logout Servlet.

				ii. Sidebar:
					This section has a number of option/action buttons, links.
						Compose:
							This button opens a compose message form which takes two inputs - ToMail, Message
								ToMail 	- the receiver email in which the message we send will be received. The same constraints as for the email in SignUp.jsp page applies here too.
								message	- the content of our email (as of now, only text/string messages are supported). Constraints (for now) is a single condition that the no. of characters is less than or equal to 256.
							The form's action is set to ComposeMail servlet with a post method.
						Inbox:
							This button changes the current session view variable value to "inbox" by redirecting to the ChangeMailView Servlet along with a get request passed value of view="inbox".
						Sent:
							This button changes the current session view variable value to "sent" by redirecting to the ChangeMailView Servlet along with a get request passed value of view="sent".
						Inbox Users:
							This button changes the current session view variable value to "inboxUsers" by redirecting to the ChangeMailView Servlet along with a get request passed value of view="inboxUsers".
						Inbox Sharers:
							This button changes the current session view variable value to "inboxSharers" by redirecting to the ChangeMailView Servlet along with a get request passed value of view="inboxSharers".

							Based on the session view variables value, the corresponding list is displayed in the main-body section.
						Share Inbox:
							This button opens a compose message form which takes a single input - receiverMail
								receiverMail 	- the receiver email to whom the present users inbox will be shared. The same constraints as for the email in SignUp.jsp page applies here too.
							The form's action is set to ShareInbox servlet with a post method.


				iii. Main-body:
					This section is where the main view component i.e, the output to show to the users is displayed.
					Based on the session view variable value, the corresponding list is generated and displayed as output.
					a. Inbox:
						In this view, the mails received by the current user sent by other users are displayed. Each of these messages contain a from Email, the message sent by the sender, and a delete button that forwards to the DeleteMailServlet along with a get request parameter of the corresponding mail Id.
					b. Sent:
						In this view, the mails sent by the current user to other users are displayed. Each of these messages contain a toEmail, the message sent to the receiver, and a delete button that forwards to the DeleteMailServlet along with a get request parameter of the corresponding mail Id.
					c. InboxUsers:
						In the view, the mail addresses of users to whom the present user's inbox is shared are displayed. Each of the list component consists of the sharingId, the mail address of the inbox receiver and a delete button that forwards to the RevokeInboxSharingServlet along with a get request parameter of the corresponding sharing Id.
					d. InboxSharers:
						In the view, the mail addresses of users who have shared their inbox to the present user inbox is shared are displayed. Each of the list component consists of the sharingId, the mail address of the inbox owner and a delete button that forwards to the RevokeInboxSharingServlet along with a get request parameter of the corresponding sharing Id.


			Each of these jsp pages has their corresponding cascading style sheet(CSS) linked to them which defines the style properties required.
			A script.js file is linked to the ZohoMail page to define the open, close actions of the share-inbox, compose forms and the close actions of the signing forms.


		3. Servlet Pages:
			The servlet pages act as controllers and process the requests sent from the jsp pages and sends back http response (here, redirecting to a jsp). The servlet request connections are as mentioned from the JSP pages. The servlets pages used for this system and their functionalities are,
				i. SignUpServlet:
					This servlet gets the firstName, lastName, email, password all of which are strings from the post method request and then create a new user using an object of the user class and based on the result, it sets the session status message.
					It then sends a redirect response to the Login.jsp page or SignUp.jsp depending on the success or failure of the user creation respectively.
				ii. LoginServlet:
					This servlet gets the email, password both of which are strings from the post method request and validates the mail address and password using an object of the MailLoginValidator class. It also sets the session username value in the process.
					It sets the session status of the login.
					Based on if the login is a success or failure it sends redirect response to ZohoMail.jsp or Login.jsp respectively.
				iii. ChangeMailViewServlet:
					This servlet changes the session view variable value to the value of the view that it received from the get request.
					And then it sends a redirect response to the ZohoMail.jsp page.
				iv. ComposeMailServlet:
					This servlet gets the parameter strings - fromMail, toMail, content from the post method and sends the mail from the fromMail user to the toMail user by creating an object of the Mail class and using the send method.
					It then sets the session status message and sends redirect to the ZohoMail.jsp page.
				v. DeleteMailServlet:
					This servlet gets the mailId from the get request and the current display bar (i.e, inbox/sent) using the session variable and then checks and deletes the mail corresponding to the mailId received using an object of the MailDeletor interface.
					It then sets the session status message and sends redirect to the ZohoMail.jsp page.
				vi. ShareInboxServlet:
					This servlet gets the receiver address as string from the post method request and the owner string from the session variable email.
					It uses an object of the InboxSharer class to share the owner inbox to the receiver and based on if the sharing was a success or a failure, it sets the status message.
					It then sends a redirect response to the ZohoMail.jsp page.
				vii. RevokeInboxSharingServlet:
					This servlet gets the sharingId of the inbox sharing from the get method request and then revoke the inbox sharing by using an object of the InboxSharingRevoker class.
					Based on if the revoking was success or not, it sets the status message.
					It then sends a redirect response to the ZohoMail.jsp page.
				viii. LogoutServlet:
					This servlet sets the status message to a successful logout and sends redirect to the Login.jsp page.
					
